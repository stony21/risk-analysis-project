import sqlite3
import pandas as pd
import networkx as nx
import matplotlib.pyplot as plt

# === 1. –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ===
db_path = "D:/work/data/corporate_network.db"
conn = sqlite3.connect(db_path)

# === 2. –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –∏–∑ SQLite ===
companii = pd.read_sql_query("SELECT * FROM Companii", conn)
relatii = pd.read_sql_query("SELECT * FROM Relatii", conn)

# === 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö –≤ CSV (–Ω–∞ —Å–ª—É—á–∞–π –∞–Ω–∞–ª–∏–∑–∞ –≤ Excel) ===
companii.to_csv("D:/work/data/Companii.csv", index=False)
relatii.to_csv("D:/work/data/Relatii.csv", index=False)

print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ CSV!")

# === 4. –°–æ–∑–¥–∞—ë–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ ===
G = nx.DiGraph()

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–ø–∞–Ω–∏–∏ –∫–∞–∫ —É–∑–ª—ã
for _, row in companii.iterrows():
    G.add_node(row["company_id"],
               name=row.get("company_name", ""),
               sector=row.get("sector", ""),
               region=row.get("region", ""),
               size=row.get("size_category", ""))

# –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑–∏ –∫–∞–∫ —Ä—ë–±—Ä–∞
for _, row in relatii.iterrows():
    G.add_edge(row["source_company_id"],
               row["target_company_id"],
               relation=row.get("relation_type", ""),
               weight=row.get("exposure_mdl", 0.0),
               ownership=row.get("ownership_pct", 0.0))

print(f"üìä –í—Å–µ–≥–æ –∫–æ–º–ø–∞–Ω–∏–π: {G.number_of_nodes()}, —Å–≤—è–∑–µ–π: {G.number_of_edges()}")

# === 5. –ê–Ω–∞–ª–∏–∑: —Å–∞–º—ã–µ "–≤–ª–∏—è—Ç–µ–ª—å–Ω—ã–µ" –∫–æ–º–ø–∞–Ω–∏–∏ (–ø–æ –∏—Å—Ö–æ–¥—è—â–∏–º —Å–≤—è–∑—è–º) ===
out_degree = sorted(G.out_degree(weight="weight"), key=lambda x: x[1], reverse=True)[:10]
print("\nüè¢ –¢–æ–ø-10 –∫–æ–º–ø–∞–Ω–∏–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏—Å—Ö–æ–¥—è—â–∏—Ö —Å–≤—è–∑–µ–π:")
for comp, deg in out_degree:
    name = companii.loc[companii["company_id"] == comp, "company_name"].values
    print(f"{comp} - {name[0] if len(name)>0 else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} ({deg:.0f} —Å–≤—è–∑–µ–π)")

# === 6. –ê–Ω–∞–ª–∏–∑: —Å–∞–º—ã–µ "–∑–∞–≤–∏—Å–∏–º—ã–µ" –∫–æ–º–ø–∞–Ω–∏–∏ (–ø–æ –≤—Ö–æ–¥—è—â–∏–º —Å–≤—è–∑—è–º) ===
in_degree = sorted(G.in_degree(weight="weight"), key=lambda x: x[1], reverse=True)[:10]
print("\nüè¶ –¢–æ–ø-10 –∫–æ–º–ø–∞–Ω–∏–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤—Ö–æ–¥—è—â–∏—Ö —Å–≤—è–∑–µ–π:")
for comp, deg in in_degree:
    name = companii.loc[companii["company_id"] == comp, "company_name"].values
    print(f"{comp} - {name[0] if len(name)>0 else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} ({deg:.0f} —Å–≤—è–∑–µ–π)")

# === 7. –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è ===
plt.figure(figsize=(14, 10))
pos = nx.spring_layout(G, k=0.25, iterations=40)
nx.draw_networkx_nodes(G, pos, node_size=30, node_color="skyblue", alpha=0.7)
nx.draw_networkx_edges(G, pos, arrowstyle="->", arrowsize=8, edge_color="gray", alpha=0.4)
plt.title("üåê –°–µ—Ç—å –≤–∑–∞–∏–º–æ—Å–≤—è–∑–µ–π –∫–æ–º–ø–∞–Ω–∏–π", fontsize=16)
plt.axis("off")
plt.show()

# === 8. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ—Å—Ç—å (–≤–ª–∏—è–Ω–∏–µ —É–∑–ª–∞) ===
centrality = nx.degree_centrality(G)
top_central = sorted(centrality.items(), key=lambda x: x[1], reverse=True)[:5]
print("\nüí° –°–∞–º—ã–µ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ (–Ω–∞–∏–±–æ–ª–µ–µ –≤–ª–∏—è—Ç–µ–ª—å–Ω—ã–µ):")
for comp, cent in top_central:
    name = companii.loc[companii["company_id"] == comp, "company_name"].values
    print(f"{comp} - {name[0] if len(name)>0 else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} (—Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ—Å—Ç—å: {cent:.3f})")
